using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Emgu.CV;
using Emgu.CV.Structure;
using System.Diagnostics;
using System.Drawing;
using System.IO;

namespace ImageRecognition
{


    /// Function header

    class Program
    {
        static void Main(string[] args)
        {
            //sbyte[] image = {-1,-40,-1,-32,0,16,74,70,73,70,0,1,1,0,0,1,0,1,0,0,-1,-37,0,67,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-37,0,67,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-64,0,17,8,0,50,0,50,3,1,34,0,2,17,1,3,17,1,-1,-60,0,31,0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,-1,-60,0,-75,16,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125,1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,-127,-111,-95,8,35,66,-79,-63,21,82,-47,-16,36,51,98,114,-126,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,-125,-124,-123,-122,-121,-120,-119,-118,-110,-109,-108,-107,-106,-105,-104,-103,-102,-94,-93,-92,-91,-90,-89,-88,-87,-86,-78,-77,-76,-75,-74,-73,-72,-71,-70,-62,-61,-60,-59,-58,-57,-56,-55,-54,-46,-45,-44,-43,-42,-41,-40,-39,-38,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-1,-60,0,31,1,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,-1,-60,0,-75,17,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119,0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,-127,8,20,66,-111,-95,-79,-63,9,35,51,82,-16,21,98,114,-47,10,22,36,52,-31,37,-15,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,-126,-125,-124,-123,-122,-121,-120,-119,-118,-110,-109,-108,-107,-106,-105,-104,-103,-102,-94,-93,-92,-91,-90,-89,-88,-87,-86,-78,-77,-76,-75,-74,-73,-72,-71,-70,-62,-61,-60,-59,-58,-57,-56,-55,-54,-46,-45,-44,-43,-42,-41,-40,-39,-38,-30,-29,-28,-27,-26,-25,-24,-23,-22,-14,-13,-12,-11,-10,-9,-8,-7,-6,-1,-38,0,12,3,1,0,2,17,3,17,0,63,0,-3,-84,-106,93,95,-60,118,50,106,82,-4,7,-109,-62,-45,36,-85,119,111,115,-29,-99,83,68,89,-102,75,-73,-123,117,11,-99,58,-41,71,-117,-59,-41,-38,109,-23,-118,-38,-35,-26,-114,77,42,8,-18,103,88,89,-27,105,99,-107,-21,35,-64,94,44,26,103,-114,-95,-80,-67,-106,16,-105,41,20,50,-54,-102,69,-2,-119,4,114,-61,52,94,86,44,-17,97,47,42,-109,44,-120,110,39,-69,118,71,-111,124,-120,97,-127,-25,-112,-16,-6,95,-59,95,20,120,-110,7,-44,-4,72,124,95,-86,-38,65,3,92,61,-66,-109,-94,-62,-6,76,77,28,102,69,105,37,77,91,16,124,-37,-93,75,-69,-24,82,24,-4,-40,-116,-41,48,-37,-103,100,79,-106,-66,42,-2,-45,-34,15,-16,79,-116,-12,109,107,-60,87,-2,78,-109,-91,-57,-88,106,-102,-70,105,-38,-103,-15,37,-26,-105,-31,-3,40,77,127,-87,-33,-21,50,105,49,-36,-38,-23,-78,91,-37,88,-53,9,-45,-59,-11,-43,-52,-105,51,-86,-32,-59,9,37,74,80,-116,91,-109,-45,95,-77,-26,-105,71,-77,-27,-66,-6,-69,-13,61,8,-123,57,78,79,-35,111,-55,94,-6,57,46,-41,-17,-22,-101,-77,73,92,-3,36,-3,-80,-65,105,-69,127,-39,-81,-32,-51,-9,-117,116,-5,-81,13,91,120,-62,125,51,93,-43,124,29,103,-29,107,61,120,-8,107,-60,39,-63,58,77,-57,-116,-4,99,-31,-37,123,-3,45,-20,45,15,-116,111,-68,15,-95,-8,-102,-29,-64,-2,31,-66,-41,-76,-87,53,-19,126,-46,44,-52,-70,29,-113,-119,117,75,79,22,-8,55,-1,0,5,83,-3,-106,-2,53,-21,-2,11,-48,-4,41,-30,104,52,-65,-8,75,-82,52,75,11,73,-68,101,-87,104,-70,21,-35,-10,-89,-86,90,-35,-59,46,-119,-31,-35,47,78,-44,53,-37,-99,123,-60,26,55,-120,101,-47,52,29,102,-33,-3,11,-61,-77,37,-2,-77,-84,120,83,-59,90,-11,-81,-123,60,87,20,63,-53,-57,-19,-67,-15,91,-29,87,-19,-9,-86,106,-38,-35,-49,-128,116,-49,10,39,-122,-4,111,101,103,-96,-51,-82,-8,-93,-59,-6,111,-124,96,-48,52,109,6,-14,-41,-58,-106,-9,122,86,-95,105,-92,-21,58,-3,-33,-120,-75,71,-16,-66,-113,31,-119,-76,-33,14,-40,53,-58,-119,-32,86,-45,-28,125,59,80,117,73,-66,6,-16,7,-20,-17,-15,-13,-63,90,118,-89,-15,79,-61,62,40,-16,119,-116,-30,-16,-32,99,-88,104,26,13,-50,-81,-86,77,-85,88,-49,-94,-23,-70,-75,-9,-111,-91,-21,94,28,-80,-75,-44,-26,125,47,80,-75,-43,-29,-117,-52,-121,90,-106,-26,52,-66,-47,-61,-8,-127,108,25,-68,-55,-26,56,72,115,-62,120,-102,16,-108,101,24,40,55,118,-101,-100,-94,-108,-102,-70,-121,52,-110,-42,82,-9,95,-59,103,-84,-67,-6,92,57,-101,85,-95,26,-48,-53,113,115,-93,42,114,-102,-86,-87,-38,46,48,124,-45,-99,53,43,74,-86,-116,19,-109,-28,-69,-107,-45,-125,111,87,-2,-109,-33,-38,113,72,-86,32,6,103,-108,-86,71,28,96,-68,-114,-20,-52,-88,-85,24,-53,51,-56,-60,40,84,92,-77,109,3,47,-63,-47,19,93,105,54,55,22,-46,11,72,-75,-53,-26,38,-19,-19,-103,-89,125,35,73,-112,-109,6,-100,-41,74,-37,36,-67,-69,-14,69,-51,-30,-38,-7,86,-26,102,91,72,-89,-69,-78,-45,-32,-42,-18,63,48,127,-32,-99,127,-76,-123,-65,-19,1,-5,48,124,33,-15,-120,-43,47,117,95,25,105,126,28,-46,-4,41,-30,119,-44,-11,121,117,109,70,31,18,-8,99,75,-76,-47,-75,31,18,-21,-41,-110,15,63,84,-43,-4,80,-119,23,-118,52,-13,121,-26,108,-74,-42,44,-75,91,-119,110,-81,-98,-42,-10,63,-46,-115,46,7,54,-51,-26,-106,103,115,-26,73,35,-74,93,-28,114,-57,123,-110,50,-50,-59,114,73,60,110,85,-55,3,-113,70,-108,-108,-31,43,-21,116,-83,126,-51,-65,93,108,-92,-81,125,59,-74,-37,127,45,90,-100,-87,84,107,-31,-27,-110,-26,93,91,-26,107,-74,-37,117,-43,-75,-10,99,43,-46,17,89,-114,26,-59,93,-122,1,118,-70,-66,12,-60,25,50,-52,18,-18,52,12,-57,4,-123,-115,20,29,-63,99,80,54,-47,90,-2,72,36,-109,-98,79,-4,-13,-49,119,-11,97,-22,61,-7,-11,-51,21,42,109,121,-19,-33,-91,-1,0,63,-2,71,123,59,-12,41,-69,43,106,-76,-7,-17,-35,95,94,89,121,-22,-75,124,-86,-1,0,-125,126,53,-15,-105,-114,44,-20,-95,-41,62,49,-8,-126,127,15,105,118,86,118,119,16,120,94,8,-28,-77,-117,68,77,86,-34,-30,91,27,123,-51,19,76,-122,91,-88,-75,-87,-20,-83,-65,-76,-92,-75,-118,-45,-5,114,-49,78,15,119,-25,-23,-17,13,-3,-86,-2,84,-4,82,-8,-81,7,-59,-3,27,93,-47,31,-61,87,-38,127,-121,-75,-71,-75,-117,89,-123,-26,-85,21,-57,-120,117,-1,0,9,110,-102,-34,23,-42,-114,-105,97,-89,46,-114,-6,-83,-111,22,-41,-102,85,-107,-10,-89,45,-117,93,-92,-21,-30,43,-69,-104,-28,-107,-1,0,80,-1,0,109,-33,-121,-98,39,-126,47,-121,62,61,-125,78,91,-72,-11,31,28,120,-65,-31,-1,0,-118,5,-59,-59,-95,-112,120,-125,-60,26,30,-127,-86,120,103,79,107,118,-107,110,-90,-118,-2,-53,64,-15,20,-112,-54,32,-14,-93,-74,-77,-76,123,-71,34,107,-21,111,59,-54,62,8,126,-56,54,23,-2,35,-16,-59,-25,-119,33,-71,-106,-53,-59,80,-21,-66,17,-71,-74,72,38,-14,-19,53,75,-115,6,-21,93,-45,-26,-68,-107,34,120,-20,45,-92,-72,-48,94,-58,57,110,85,34,-101,80,-71,-45,-12,-24,-27,-5,101,-59,-68,47,-14,-7,-58,97,-118,-93,-119,-87,-123,-124,-100,32,-95,25,41,37,105,77,-72,-73,-93,110,-47,-115,-17,-16,-21,117,47,122,-14,-110,127,-82,112,71,13,101,120,-20,29,44,-57,20,-107,105,78,-68,-95,56,-50,79,-39,97,-31,12,66,-89,110,72,-75,-19,42,74,41,-44,-3,-21,-78,-116,-46,-116,83,94,-46,95,-102,58,119,-128,-4,125,-15,31,66,-41,-12,-99,14,-53,81,-70,-111,-121,-120,109,-46,-10,-49,76,-66,-114,-43,5,-114,-79,125,-89,-39,69,107,36,49,52,111,113,27,36,19,75,28,110,-66,108,105,57,0,-76,114,-122,-10,-49,-39,-53,-10,122,-15,-89,-125,-66,16,-40,-59,-29,88,47,44,-68,97,-86,-22,-38,117,-34,-91,-89,-34,-77,-55,127,20,58,62,-127,-92,120,98,-34,-30,-26,89,97,-115,-25,-102,-6,-53,-61,-42,119,50,92,-104,-62,78,103,-110,117,99,25,86,63,-73,62,28,-47,124,11,-5,55,62,-76,-66,13,-48,-27,-42,-31,-44,102,-15,115,-21,54,22,118,-79,-105,-73,-43,78,-92,-66,37,-45,3,94,-35,89,-121,-72,-114,-34,-22,-22,125,54,-50,40,-27,-14,-123,-34,-95,-84,66,103,121,-83,103,97,-32,95,-77,28,95,17,-65,104,127,-8,73,60,83,-15,75,66,-101,71,-15,101,-83,-26,-101,38,-92,-46,105,79,98,-77,-39,63,-116,126,42,120,38,-46,56,45,-39,17,124,-69,93,51,-64,58,83,9,-58,-29,112,46,18,-3,-56,-5,70,-54,-7,12,77,73,-86,56,-107,74,73,-63,56,78,75,-107,-13,55,-19,36,-30,-108,-102,-65,45,-81,-51,-3,-21,-59,-34,74,-25,-17,117,50,-52,-86,-108,104,85,-124,-91,40,-58,21,41,80,-87,54,-32,-91,25,77,-58,79,-39,108,-92,-107,37,21,38,-38,81,-110,105,57,115,-56,-16,-49,-8,34,-59,-18,-75,-31,31,-120,127,-75,-89,-64,-35,78,-34,13,63,74,-16,-65,-113,116,-1,0,20,-8,87,71,-73,-122,85,93,58,-57,94,-43,124,85,13,-37,-104,-60,17,37,-84,23,118,22,62,31,91,75,98,118,67,-10,89,-123,-110,-67,-93,-92,105,-3,44,105,-106,-32,90,-27,70,-32,-95,23,-96,12,65,-36,15,126,-100,0,0,-1,0,101,-127,-56,-55,-4,43,-1,0,-126,122,105,112,-35,126,-42,-97,-74,-49,-120,109,45,-46,40,45,60,115,-90,-8,38,119,-115,11,-59,45,-33,-126,-11,29,123,-61,72,98,116,18,69,11,33,-47,-18,-98,-19,68,-37,-92,-65,-98,-31,-115,-68,108,-78,51,126,-7,104,-80,9,32,-63,0,-128,16,110,-24,15,44,50,120,-56,44,84,-29,-87,25,-25,57,-55,-3,55,42,-100,-86,96,112,-77,-102,-27,-108,-16,-12,101,52,-18,-7,91,-115,-34,-87,-35,-35,-71,94,-18,-17,107,-90,-92,-49,-29,-98,36,-91,78,-122,115,-102,82,-91,37,58,116,-79,-72,-102,116,-38,73,41,66,53,-86,40,52,-81,109,-93,-78,-18,-76,110,-55,102,-3,-99,-71,-60,96,-5,-103,84,19,-53,115,-125,-45,-90,113,-55,-7,-79,-100,-13,69,117,31,96,60,-12,-1,0,-66,-113,-85,-6,-81,-8,117,30,-76,87,85,-65,-63,-1,0,-127,63,-2,75,-25,-1,0,4,-14,99,123,45,94,-53,-7,127,-65,-35,95,-65,-97,-59,-3,-45,-13,-2,-57,-63,26,-17,-59,-1,0,-122,-102,-113,-61,-33,-117,-33,15,-20,-4,75,-31,-33,18,65,97,28,62,49,-8,103,-82,-38,107,26,-42,-103,-88,-23,-78,-115,67,64,-42,108,116,-35,27,-2,18,13,126,-53,86,-47,46,109,-38,-29,79,-43,-20,116,93,77,89,-42,-33,68,-41,124,57,-84,120,30,-21,95,-47,-27,-30,7,-62,-81,-118,-33,4,-2,14,-8,-70,-9,-60,-34,2,-78,-8,-49,113,-31,63,-19,109,120,106,-34,25,-15,15,-123,60,17,-84,-24,-6,39,-122,-83,71,-120,116,63,22,124,71,-16,-65,-113,-11,-117,29,99,-61,-102,-35,-118,-38,-61,127,-87,-24,-65,12,97,-8,-77,-88,-23,-38,-108,2,95,14,71,-84,106,-114,52,36,-15,-1,0,-123,127,24,-4,39,-85,-55,103,-86,-23,126,51,-15,92,-98,36,-115,-32,123,-51,39,95,-41,-4,79,-90,-67,-102,-55,32,-118,-22,-57,-2,17,-97,10,-24,54,-105,6,-43,-36,-94,-101,-51,59,-60,-79,-61,4,126,84,-105,51,-64,-63,101,63,-89,127,12,53,-65,26,106,-98,28,-72,-42,124,65,-95,89,-37,104,122,-91,-123,-99,-67,-123,-38,-90,-71,55,-120,-34,61,115,85,-47,116,-45,-89,-36,-8,-125,-60,58,-114,-85,-83,91,104,44,-6,-107,-67,-15,-45,-89,-66,-69,-77,-43,70,-99,20,66,115,-93,107,22,-9,87,60,-72,-100,-73,9,-104,-70,110,-84,100,-25,23,21,26,-108,-27,105,-14,-13,73,-14,55,105,39,23,-67,-97,-67,20,-33,44,-109,-69,127,79,-109,-15,38,105,-61,-22,-76,48,-107,41,-70,21,31,61,76,61,120,57,82,-25,-27,113,-10,-111,74,81,-100,42,114,70,-51,-58,74,19,74,10,-92,39,21,11,-2,76,126,-54,31,-16,81,15,-39,123,-10,-115,-16,-106,-93,-89,-8,-73,-62,-34,40,-8,123,-15,31,72,-16,86,-83,-29,-65,18,120,83,81,-16,-51,-2,-67,5,-18,-115,-92,107,90,102,-111,-84,-21,126,13,-41,60,61,97,118,124,77,111,14,-75,-87,-23,90,117,-66,-101,117,-89,105,-98,46,-44,-17,102,49,88,120,102,-18,59,91,-21,-124,-16,63,-120,-65,-16,87,-17,-39,-117,-61,58,111,-113,-68,1,-5,56,104,94,40,-15,23,-60,-51,77,117,95,-121,-34,25,-15,-26,-87,-1,0,8,-84,94,16,125,95,79,-44,60,99,117,111,-30,59,11,123,61,119,-59,94,34,-43,-32,-48,117,29,110,-1,0,87,-45,-76,-19,71,-63,-70,117,-90,-87,4,-38,110,-101,-88,106,58,125,-103,-106,-22,46,55,-2,11,117,-1,0,4,-9,-8,61,97,105,-5,48,105,-1,0,5,-2,28,120,107,-64,-105,-98,35,-65,-8,-77,119,-30,93,87,79,-114,99,106,-19,-95,-38,124,52,-118,-64,-55,-96,13,55,86,93,90,118,58,-91,-35,-28,118,-79,69,107,101,4,22,51,-39,70,-47,75,117,98,-23,-7,-99,-5,45,126,-61,-49,-32,-81,-113,-97,4,-4,79,-30,-8,82,104,60,67,-30,-33,3,91,92,-8,121,103,123,-51,34,-35,32,-15,70,-97,99,119,103,126,-110,-83,-100,-46,75,121,108,-19,118,67,-40,-72,-5,80,-115,111,-82,-17,47,33,-68,-43,-18,62,107,31,-108,-32,-80,50,-83,-120,-88,-22,-68,60,93,24,58,105,39,77,58,-104,-118,116,-31,78,117,116,-108,-93,82,-92,-29,24,-58,86,113,109,-34,111,86,126,-107,-127,-29,124,110,109,-128,-93,-124,-95,24,67,25,124,69,71,82,88,-114,105,-54,-99,58,21,-22,-54,84,48,-54,22,-91,56,67,15,58,-109,-97,-76,-100,42,43,90,-108,28,100,-89,-3,3,-1,0,-63,51,-66,24,-81,-61,63,-127,-70,93,-43,-1,0,-10,-116,-66,32,-15,-34,-79,-87,120,-21,93,-67,-42,111,-123,-2,-81,-88,73,-83,75,28,86,-38,-90,-93,117,-26,51,-53,121,-81,-39,88,-38,-8,-109,80,19,-20,-68,-2,-41,-43,-75,57,53,11,120,117,23,-67,-128,126,-52,120,110,47,-12,68,124,1,-72,12,119,3,46,-32,101,72,-49,-16,124,-99,-6,-18,36,-112,-57,-32,63,-127,-47,-85,105,-42,49,91,-124,-113,-9,54,104,-79,-123,-39,16,-119,55,40,9,24,92,-95,8,-61,9,-75,-109,10,-118,-86,29,-102,74,-3,5,-16,-55,43,100,-111,50,-123,112,-118,74,-80,59,-127,105,93,67,112,113,-75,-118,50,-93,2,85,-43,9,66,-64,23,-81,-79,-61,-45,84,-23,56,47,-122,16,-123,53,-90,-98,-18,-17,103,-43,-74,-19,-42,-6,-21,115,-15,12,109,121,98,49,53,42,73,-34,85,42,-54,111,-85,-68,-89,39,109,-6,107,107,-34,-9,122,-35,92,-24,2,113,-54,-126,120,-25,-111,-98,92,30,4,103,-47,123,-100,113,-55,4,-110,85,-80,-63,120,5,-80,48,63,-121,-79,112,58,-116,-6,-11,57,-58,58,-100,-102,43,62,89,62,-113,-6,-65,-97,-81,95,-26,-42,-22,76,113,-116,-110,90,95,69,-1,0,-73,-1,0,-97,-2,-107,-4,-82,-1,0,-106,-65,5,117,45,75,69,-47,-29,-45,116,109,66,-9,74,-45,-46,-25,90,84,-80,-45,110,-18,44,108,-107,68,-41,-116,21,109,109,101,-118,21,80,-64,48,80,-104,13,-125,-9,-122,79,-91,124,109,-67,-67,-73,-8,-77,-5,18,88,-37,-34,93,67,103,117,-5,76,-54,46,-84,-31,-72,-102,59,91,-111,39,-20,-75,-5,94,-33,72,46,45,-46,65,20,-62,75,-53,91,107,-57,18,43,6,-69,-126,-34,-27,-119,-98,40,-28,-94,-118,-23,-95,-4,106,63,63,-3,36,120,-99,-22,-1,0,95,106,-95,-32,127,-16,88,14,47,63,101,98,63,-25,-89,-58,110,125,-4,-65,-124,-7,61,123,-9,-2,102,-65,55,124,62,-85,39,-60,-49,-127,-79,-56,4,-111,-113,-120,63,15,37,8,-32,50,9,96,-8,-101,-32,-87,32,-108,43,18,4,-112,-72,15,19,-3,-8,-33,12,-116,24,110,37,21,-32,-15,79,-4,-118,113,31,-10,29,-109,127,-22,-21,6,125,31,7,127,-56,-33,15,-1,0,96,89,-65,-2,-87,115,3,-11,-97,-10,122,36,-66,-98,-92,-110,60,-101,51,-126,78,50,95,36,-29,36,100,-98,79,114,122,-110,126,106,-5,-2,-51,-35,52,-88,100,71,101,113,125,-92,70,29,89,-125,-120,-27,-41,108,34,-107,3,3,-72,36,-111,-109,28,-117,-100,60,100,-93,110,82,114,81,95,65,15,-126,127,51,-28,101,-4,101,-21,79,-1,0,74,-88,118,-60,-100,-73,39,-81,-87,-2,-12,-125,-41,-40,126,-100,-15,-110,81,69,115,-82,-97,47,-3,-58,122,39,-1,-39};
            // byte[] test = new byte[image.Length];
            // Buffer.BlockCopy(image, 0, test, 0, image.Length);
            //var ms = new MemoryStream(test);
            //Bitmap b_image = new Bitmap(ms);
            //Bitmap gray;

            Classifier classifier = new Classifier();
            classifier.runMatchCollectionOfImages();

            return;
            string[] CfileNames = Directory.GetFiles("C:\\Users\\Aeolus\\Pictures\\SAMBUG\\C\\Adult");
            string[] YfileNames = Directory.GetFiles("C:\\Users\\Aeolus\\Pictures\\SAMBUG\\Y\\Adult");
            string[] TfileNames = Directory.GetFiles("C:\\Users\\Aeolus\\Pictures\\SAMBUG\\T\\Adult");

            List<Bitmap> C = new List<Bitmap>();
            List<Bitmap> Y = new List<Bitmap>();
            List<Bitmap> T = new List<Bitmap>();

            foreach (var file in CfileNames)
                C.Add(new Bitmap(file));

            foreach (var file in YfileNames)
                Y.Add(new Bitmap(file));

            //foreach (var file in TfileNames)
            //    T.Add(new Bitmap(file));

            List<ImageBundle> C_Bundle = new List<ImageBundle>();
            List<ImageBundle> Y_Bundle = new List<ImageBundle>();
            //List<ImageBundle> T_Bundle = new List<ImageBundle>();
            //int smallestRows = 999999;


            Matrix<byte> ORBfeatures = classifier.getORBDescriptors(new Image<Gray, byte>(C[0]));


            foreach (var b in C)
            {
               // Bitmap gray;
                //Bitmap b_temp = b;
                //imageProcessor.IdentifyContours(b, 110, true, out gray, out b_temp);

                Image<Gray, byte> temp = new Image<Gray, byte>(b);
                //temp = temp.Resize(475, 550, Emgu.CV.CvEnum.INTER.CV_INTER_CUBIC);
                
                //Emgu.CV.UI.ImageViewer.Show(temp);
                
                ImageBundle bundle = new ImageBundle(temp);
                C_Bundle.Add(bundle);
               /* if (bundle.features.Rows < smallestRows)
                {
                    smallestRows = bundle.features.Rows;
                }
                */
            }

            foreach (var b in Y)
            {
                //Bitmap gray;
               // Bitmap b_temp = b;
               // imageProcessor.IdentifyContours(b, 110, true, out gray, out b_temp);

                Image<Gray, byte> temp = new Image<Gray, byte>(b);
                //temp = temp.Resize(475, 550, Emgu.CV.CvEnum.INTER.CV_INTER_CUBIC);

                //Emgu.CV.UI.ImageViewer.Show(temp);

                ImageBundle bundle = new ImageBundle(temp);
                Y_Bundle.Add(bundle);
                //if (bundle.features.Rows < smallestRows)
                //{
                //    smallestRows = bundle.features.Rows;
                //}
            }

           /* foreach (var b in T)
            {
                Bitmap gray;
                Bitmap b_temp = b;
                imageProcessor.IdentifyContours(b, 110, true, out gray, out b_temp);

                Image<Gray, byte> temp = new Image<Gray, byte>(b_temp);
                temp = temp.Resize(475, 550, Emgu.CV.CvEnum.INTER.CV_INTER_CUBIC);

                Emgu.CV.UI.ImageViewer.Show(temp);

                ImageBundle bundle = new ImageBundle(temp);
                T_Bundle.Add(bundle);
                if (bundle.features.Rows < smallestRows)
                {
                    smallestRows = bundle.features.Rows;
                }
            }
            * */
            Emgu.CV.ML.ANN_MLP network = classifier.getImageANN(C_Bundle,Y_Bundle);
            if (network == null) return;
            List<ImageBundle> CB = new List<ImageBundle>();
            List<ImageBundle> YB = new List<ImageBundle>();
            Matrix<int> confusion = classifier.getConfusionMatrix(network, C_Bundle, Y_Bundle);
            for (int r = 0; r < confusion.Rows; r++)
            {
                for (int c = 0; c < confusion.Cols; c++)
                {
                    Debug.Write(confusion.Data[r, c] + " ");
                }
                Debug.WriteLine("");
            }
            Debug.WriteLine("Done");
        }
    }
}


